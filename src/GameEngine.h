/**
 * @file GameEngine.h
 * @brief Заголовочный файл логики консольной игры "Тетрис".
 *
 * Содержит определения структур и объявление глобальных переменных,
 * а также интерфейс функций, отвечающих за отрисовку поля, 
 * обработку фигур, пользовательского ввода, генерацию и проверку коллизий.
 */

#pragma once
#include <vector>

/// @struct Piece
/// @brief Структура, описывающая фигуру Тетриса.
struct Piece {
    int x; ///< Положение фигуры по горизонтали.
    int y; ///< Положение фигуры по вертикали.
    std::vector<std::vector<int>> shape; ///< Форма фигуры как матрица (2D-вектор).
};

/// @var field
/// Игровое поле 20x10, где 0 — пустая клетка, 1 — занятая.
extern std::vector<std::vector<int>> field;

/// @var current
/// Текущая фигура, управляемая игроком.
extern Piece current;

/// @var paused
/// Флаг паузы игры (true — игра на паузе).
extern bool paused;

/// @var level
/// Текущий уровень сложности игры (1 — лёгкий, 2 — средний, 3 — сложный).
extern int level;

/// @var speed
/// Скорость падения фигур (в миллисекундах), зависит от уровня.
extern int speed;

/// @var score
/// Текущий счёт игрока.
extern int score;

/// @var highScore
/// Лучший результат, сохранённый между сессиями.
extern int highScore;

/**
 * @brief Поворачивает фигуру по часовой стрелке, если это возможно.
 * @param p Ссылка на фигуру для поворота.
 */
void rotate(Piece &p);

/**
 * @brief Проверяет возможность размещения фигуры на текущей позиции.
 * @param p Проверяемая фигура.
 * @return true — если можно разместить, false — если произойдёт коллизия.
 */
bool is_valid_position(const Piece &p);

/**
 * @brief Устанавливает или удаляет фигуру с игрового поля.
 * @param p Фигура.
 * @param value 1 — разместить фигуру, 0 — удалить.
 */
void apply_piece_to_field(const Piece &p, int value);

/**
 * @brief Генерирует новую случайную фигуру.
 * @return Новая фигура типа Piece.
 */
Piece generate_piece();

/**
 * @brief Проверяет, завершена ли игра.
 * @return true — если фигура не может быть размещена, иначе false.
 */
bool game_over();

/**
 * @brief Проверяет и очищает полностью заполненные линии.
 * Также увеличивает счёт и ускоряет игру.
 */
void clear_lines();

/**
 * @brief Обновляет уровень сложности и скорость падения фигуры.
 * Используется для адаптации игры к набранному счёту.
 */
void update_level();

/**
 * @brief Обновляет рекорд, если текущий счёт выше.
 */
void update_high_score();

/**
 * @brief Отображает начальное меню выбора уровня сложности.
 */
void show_menu();

/**
 * @brief Загружает рекорд из файла (если существует).
 */
void load_high_score();

/**
 * @brief Выполняет отрисовку поля, текущей фигуры и информационной панели.
 */
void draw();

/**
 * @brief Обрабатывает нажатие клавиш: движение, поворот, пауза.
 */
void input();

/**
 * @brief Обновляет состояние игры: падение фигуры, генерация новой, проверка завершения.
 */
void update_game();
